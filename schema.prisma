generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PasswordResetToken {
  id        String   @id @default(uuid()) @db.VarChar(50)
  userId    String   @unique @map("user_id") @db.VarChar(36)
  token     String   @unique @map("token") @db.VarChar(255)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model User {
  id                 String              @id @map("id") @db.VarChar(36)
  email              String              @unique @map("email") @db.VarChar(255)
  firstName          String              @map("first_name") @db.VarChar(255)
  lastName           String              @map("last_name") @db.VarChar(255)
  lastSignedIn       DateTime?           @map("last_signed_in")
  accountStatus      AccountStatusList   @default(ACTIVE) @map("account_status")
  createdAt          DateTime            @default(now())
  updatedAt          DateTime?           @updatedAt
  passwordResetToken PasswordResetToken?
  userCompanyRoles   UserCompanyRole[]
  userCompanies      UserCompany[]
  userPermissions    UserPermission[]
}

model Company {
  id               String            @id @default(uuid()) @map("id") @db.VarChar(36)
  name             String            @map("name") @db.VarChar(255)
  logo             String?           @map("logo") @db.VarChar(255)
  website          String?           @map("website") @db.VarChar(255)
  address1         String?           @map("address1") @db.VarChar(255)
  address2         String?           @map("address2") @db.VarChar(255)
  city             String?           @map("city") @db.VarChar(255)
  state            String?           @map("state") @db.VarChar(255)
  zip              String?           @map("zip") @db.VarChar(255)
  countryCode      String?           @map("country_code") @db.VarChar(3)
  createdAt        DateTime          @default(now()) @map("created_at")
  createdByUserId  String            @map("created_by_user_id") @db.VarChar(36)
  updatedAt        DateTime?         @updatedAt @map("updated_at")
  updatedByUserId  String?           @map("updated_by_user_id") @db.VarChar(36)
  userCompanyRoles UserCompanyRole[]
  userCompanies    UserCompany[]
}

model Role {
  id               String            @id @default(uuid()) @map("id") @db.VarChar(36)
  name             String            @unique @map("name") @db.VarChar(50)
  description      String?           @map("description") @db.VarChar(500)
  isActive         Boolean           @default(true) @map("is_active")
  isDeleted        Boolean           @default(false) @map("is_deleted")
  createdAt        DateTime          @default(now())
  createdByUserId  String?           @map("created_by_user_id") @db.VarChar(36)
  updatedAt        DateTime?         @updatedAt
  updatedByUserId  String?           @map("updated_by_user_id") @db.VarChar(36)
  rolePermissions  RolePermission[]
  userCompanyRoles UserCompanyRole[]
}

model Permission {
  id              String           @id @map("id") @db.VarChar(36)
  name            String           @unique @map("name") @db.VarChar(50)
  description     String?          @map("description") @db.VarChar(500)
  isActive        Boolean          @default(true) @map("is_active")
  isDeleted       Boolean          @default(false) @map("is_deleted")
  createdAt       DateTime         @default(now())
  createdByUserId String?          @map("created_by_user_id") @db.VarChar(36)
  updatedAt       DateTime?        @updatedAt
  updatedByUserId String?          @map("updated_by_user_id") @db.VarChar(36)
  rolePermissions RolePermission[]
  userPermissions UserPermission[]
}

model RolePermission {
  roleId          String     @map("role_id") @db.VarChar(36)
  permissionId    String     @map("permission_id") @db.VarChar(36)
  createdByUserId String?    @map("created_by_user_id") @db.VarChar(36)
  createdAt       DateTime   @default(now())
  updatedByUserId String?    @map("updated_by_user_id") @db.VarChar(36)
  updatedAt       DateTime?  @updatedAt
  role            Role       @relation(fields: [roleId], references: [id])
  permission      Permission @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
}

model UserCompanyRole {
  userId          String    @map("user_id") @db.VarChar(36)
  companyId       String    @map("company_id") @db.VarChar(36)
  roleId          String    @map("role_id") @db.VarChar(36)
  createdByUserId String?   @map("created_by_user_id") @db.VarChar(36)
  createdAt       DateTime  @default(now())
  updatedByUserId String?   @map("updated_by_user_id") @db.VarChar(36)
  updatedAt       DateTime? @updatedAt
  user            User      @relation(fields: [userId], references: [id])
  company         Company   @relation(fields: [companyId], references: [id])
  role            Role      @relation(fields: [roleId], references: [id])

  @@id([userId, companyId, roleId])
}

model UserCompany {
  userId          String    @map("user_id") @db.VarChar(36)
  companyId       String    @map("company_id") @db.VarChar(36)
  createdByUserId String?   @map("created_by_user_id") @db.VarChar(36)
  createdAt       DateTime  @default(now())
  updatedByUserId String?   @map("updated_by_user_id") @db.VarChar(36)
  updatedAt       DateTime? @updatedAt
  user            User      @relation(fields: [userId], references: [id])
  company         Company   @relation(fields: [companyId], references: [id])

  @@id([userId, companyId])
}

model UserPermission {
  userId          String     @map("user_id") @db.VarChar(36)
  permissionId    String     @map("permission_id") @db.VarChar(36)
  createdByUserId String?    @map("created_by_user_id") @db.VarChar(36)
  createdAt       DateTime   @default(now())
  updatedByUserId String?    @map("updated_by_user_id") @db.VarChar(36)
  updatedAt       DateTime?  @updatedAt
  user            User       @relation(fields: [userId], references: [id])
  permission      Permission @relation(fields: [permissionId], references: [id])

  @@id([userId, permissionId])
}

model EntityInformation {
  id                         String                @id @default(uuid()) @map("id") @db.VarChar(36)
  entityName                 String?               @map("name") @db.VarChar(255)
  entityType                 String?               @map("entity_type") @db.VarChar(255)
  country                    String?               @map("country_of_incorporation") @db.VarChar(255)
  operatingAddress           String?               @map("operating_address") @db.VarChar(255)
  mailingAddress             String?               @map("mailing_address") @db.VarChar(255)
  tin                        String?               @map("tax_identification_number") @db.VarChar(255)
  countryOfTaxResidence      String?               @map("country_of_tax_residence") @db.VarChar(255)
  previousFatcaStatus        String?               @map("previous_fatca_status") @db.VarChar(255)
  previousFatcaRational      String?               @map("previous_fatca_rational") @db.VarChar(255)
  previousCrsStatus          String?               @map("previous_crs_status") @db.VarChar(255)
  previousCrsRational        String?               @map("previous_crs_rational") @db.VarChar(255)
  controllingPerson          String?               @map("controlling_person") @db.VarChar(255)
  ownershipStructure         String?               @map("ownership_structure") @db.VarChar(255)
  directorsName              String?               @map("director_name") @db.VarChar(255)
  financialAccounts          String?               @map("financial_accounts") @db.VarChar(255)
  mainBusinessActivities     String?               @map("main_business_activities") @db.Text
  regulatoryLicences         String?               @map("regulatory_licences") @db.VarChar(255)
  complianceOfficerDetail    String?               @map("compliance_officer_detail") @db.VarChar(255)
  managingFinancial          String?               @map("managing_financial") @db.VarChar(255)
  financialCountry           String?               @map("financial_country") @db.VarChar(255)
  dateOfEstablishment        String?               @map("date_of_establishment") @db.VarChar(30)
  entityDissolutionDate      String?               @map("entity_of_dissolution") @db.VarChar(30)
  sourceOfWealth             String?               @map("source_of_wealth") @db.VarChar(255)
  articlesOfIncorporation    String?               @map("articles_of_incorporation") @db.VarChar(255)
  trustDeed                  String?               @map("trust_deed") @db.VarChar(255)
  reportableAccount          String?               @map("reportable_account") @db.VarChar(255)
  additionalInformation      Json?                 @map("additional_information")
  usersAdditionalInformation String?               @map("users_additional_information") @db.VarChar(255)
  createdAt                  DateTime              @default(now()) @map("created_at")
  createdByUserId            String?               @map("created_by_user_id") @db.VarChar(36)
  updatedAt                  DateTime              @updatedAt @map("updated_at")
  updatedByUserId            String?               @map("updated_by_user_id") @db.VarChar(36)
  classification             EntityClassification?
}

model EntityClassification {
  id                           String   @id @default(uuid()) @map("id") @db.VarChar(36)
  suggestedFatcaClassification String   @map("regulatory_licences") @db.VarChar(255)
  suggestedCrsClassification   String   @map("suggested_crs_classification") @db.VarChar(255)
  fatcaConfidenceRate          String   @map("fatca_confidence_rate") @db.VarChar(255)
  crsConfidenceRate            String   @map("crs_confidence_rate") @db.VarChar(255)
  fatcaRationale               String   @map("fatca_rationale") @db.VarChar(255)
  crsRationale                 String   @map("crs_rationale") @db.VarChar(255)
  fatcaConfidenceRational      String   @map("fatca_confidence_rationale") @db.VarChar(255)
  crsConfidenceRational        String   @map("crs_confidence_rationale") @db.VarChar(255)
  createdAt                    DateTime @default(now())
  createdByUserId              String?  @map("created_by_user_id") @db.VarChar(36)
  updatedAt                    DateTime @updatedAt @map("updated_at")
  updatedByUserId              String?  @map("updated_by_user_id") @db.VarChar(36)

  entityInformationId String            @unique
  entityInformation   EntityInformation @relation(fields: [entityInformationId], references: [id])
}

enum EntityType {
  TRUST
  CORPORATION
  PARTNERSHIP
}

enum AccountStatusList {
  ACTIVE
  SUSPENDED
  DEACTIVATED
  PENDING
}
